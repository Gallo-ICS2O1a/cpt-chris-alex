rockSize = 49
overRock = None
locked = None
speed = PVector(0.1, 0)
speed2 = PVector(0.1, 0)
speed3 = PVector(0.1, 0)
speed4 = PVector(0.1, 0)
acceleration = PVector(-1, 0)
deceleration = PVector(-1, 0)
RED = (255,0,0)
GREEN = (0,255,0)
BLUE = (0,0,255)
button_size = 200
button_x = 650
button_y = 350
button_x2 = 900
button_y2 = 390
button_size2 = 120
button_x3 = 20
button_y3 = 400
button_size3 = 100
page = 1
pos = PVector(20, 100)
pos2 = PVector(80, 100)
pos3 = PVector(20, 450)
pos4 = PVector(80, 450)
pos_new = PVector(100, 250)
pos_new2 = PVector(100, 250)
pos_new3 = PVector(100, 250)
pos_new4 = PVector(100, 250)
target = PVector(1020, 250)
mouseAngle = PVector(0, 0)
easing = 0.05
score1 = 0
nospeed = PVector(0, 0)
target_dist = PVector(0, 0)
mouseAngleX = 1
mouseAngleY = 1
topspeed = 5
arrow = PVector(200, 250)
score2 = 0

# rocks1 = [pos, pos2]
# rocks2 = [[pos3, speed], [pos4, speed]]

def setup():
    global rx
    global ry
    size(1300, 500)
    background(225)
    # frameRate(30)
    rx = width/2
    ry = height/2
    rectMode(RADIUS)
    frameRate(9000000000)

def draw():
    global rx
    global ry
    global speed
    global rockSize
    global locked
    global overBox
    global page
    global pos, pos_new
    global target
    global pos2, pos_new2
    global mouseAngle
    global easing
    global page
    global arrow
    global rocks1
    global rocks2
    global pos3, pos_new3
    global pos4, pos_new4
    global speed2
    global speed3
    global speed4
    
    background(255)
    
    # Start button
    fill(255, 0, 0)
    ellipse(button_x, button_y, button_size, button_size)
    # Title
    fill(0)
    textSize(75)
    text("Curling Simulator 20000", 280, 200)
    text("Start", 560, 375)
    
    fill(0, 0,225)
    ellipse(button_x2, button_y2, button_size2, button_size2)
    fill(225)
    textSize(15)
    text("How to Play", button_x2 - 40, button_y2)

    
    if page == 2:
        fill(255)
        fill(225)
        rect(1300, 1300, 1300, 1300)
        fill(19, 48, 219)
        # big circle target
        ellipse(target.x, target.y, 350, 350)
        fill(225)
        # 3rd circle - 2nd from biggest
        ellipse(target.x, target.y, 250, 250)
        fill(219, 38, 59)
        # 2nd circle - 2nd from middle
        ellipse(target.x, target.y ,150, 150)
        fill(225)
        # smallest circle - center
        ellipse(target.x, target.y, 50, 50)
        
        fill(0, 225, 0)
        ellipse(pos.x, pos.y, rockSize, rockSize)  
        ellipse(pos2.x, pos2.y, rockSize, rockSize)
        fill(23457890,12374890,12374182390471)
        ellipse(pos3.x, pos3.y, rockSize, rockSize)
        ellipse(pos4.x, pos4.y, rockSize, rockSize)
        
        # fill(225, 888, 32049587)
        # ellipse(button_x3, button_y3, button_size3, button_size3)
    
        # current_rock = rocks1.pop()
        # print(current_rock)
        
        # vector_angle = PVector.sub(pos, target)
        # dist = vector_angle.mag()
        # print(dist)
        # fill(225, 0, 0)
        # if pos.x > width/2 + 200:
        #     ellipse(pos3.x, pos3.y, 49, 49) 
        # if pos.x > width:
        #     pos.x = width - 49


        if mousePressed == True:
            mouseAngle = PVector(mouseX, mouseY)
            print(mouseAngle)
            angle = PVector.sub(pos, mouseAngle)
            arrowangle = angle.heading()
            vect = PVector.fromAngle(arrowangle)
            # print(vect)
            speed.sub(vect)
            
            mouseAngle2 = PVector(mouseX, mouseY)
            angle2 = PVector.sub(pos2, mouseAngle2)
            arrowangle2 = angle2.heading()
            vect2 = PVector.fromAngle(arrowangle2)
            speed2.sub(vect2)
            
            mouseAngle3 = PVector(mouseX, mouseY)
            angle3 = PVector.sub(pos3, mouseAngle3)
            arrowangle3 = angle3.heading()
            vect3 = PVector.fromAngle(arrowangle3)
            speed3.sub(vect3)
            
            mouseAngle4 = PVector(mouseX, mouseY)
            angle4 = PVector.sub(pos4, mouseAngle4)
            arrowangle4 = angle4.heading()
            vect4 = PVector.fromAngle(arrowangle4)
            speed4.sub(vect4)
      
    
            # distance = width - mouseX
                # print(distance)
        # arrowI = PVector(mouseX, mouseY)        
        # speed = arrowI.mag()
        # print(speed)
        
        textSize(40)
        fill(69, 69, 69)
        text("PLAYER1 Score: " + str(score1), 100, 100)
        text("PLAYER2 Score: " + str(score2), 600, 100)
        
        thing = mouseX - 500
        if mouseX < width/2:
            thing = mouseX
        fill(225, 0, 0)
        line(arrow.x, arrow.y, thing, mouseY)
    if keyCode == UP:
        pos = pos_new
    if keyCode == RIGHT:
        pos2 = pos_new2
    elif keyCode == DOWN:
        pos3 = pos_new3
    elif keyCode == LEFT:
        pos4 = pos_new4
    
    if pos_new.x and pos_new2.x and pos_new3.x and pos_new4.x > width/2:
        text("Game Over", width/2 - 200, height/2)
    if page == 3:
        background(0)
        textSize(30)
        text("Use the line to aim your shot", 10, 30)
        text("to move the rock to the starting position, use the arrow keys", 10, 60)
        text("the UP and RIGHT keys are for player one, the down an left ones are for player2", 10, 120)
        fill(225)
        ellipse(button_x3, button_y3, button_size3, button_size3)
        

def mousePressed():
    global rocks1
    global rocks2
    global pos_new, pos_new2, pos_new3, pos_new4
    global speed, speed2, speed3, speed4
    



    
       
    
def mouseDragged():
    global pos, mouseAngleX, mouseAngleY
    global topspeed
    global mouseAngle
    global speed, speed2, speed3, speed4
    global pos2 
    global pos3
    global pos4
    global pos_new
    global pos_new2
    global pos_new3
    global pos_new4
    
    if keyCode == UP:
        mouseAngle = pos_new
        pos_new = pos_new + speed
    elif keyCode == RIGHT:
        mouseAngle = pos_new2
        pos_new2 = pos_new2 - speed
    elif keyCode == DOWN:
        mouseAngle = pos_new3
        pos_new3 = pos_new3 - speed
    elif keyCode == LEFT:
        mouseAngle = pos_new4
        pos_new4 = pos_new4 - speed
        
   
    
    
def mouseReleased():
    global pos
    global speed
    global acceleration
    global nospeed
    global target
    global target_dist
    global score
    global topspeed
    global easing
    global pos2
    global mouseAngle
    global score1
    global score2
    
    target_distx = target.x - pos.x
    # print(target_distx)
    target_disty = target.y - pos.y
    # print(target_disty)

    if target_distx < 50 and target_distx > -50 and target_disty < 50 and target_disty > -50:
        score1 += 5
    elif target_distx < 100 and target_distx > -100 and  target_disty < 100 and target_disty > -100:
        score1 += 3
    elif target_distx < 150 and target_distx > -150 and target_disty < 150 and target_disty > -150:
        score1 += 2
            
    target_distx2 = target.x - pos2.x
    # print(target_distx)
    target_disty2 = target.y - pos2.y
    # print(target_disty)

    if target_distx2 < 50 and target_distx2 > -50 and target_disty2 < 50 and target_disty2 > -50:
        score1 += 5
    elif target_distx2 < 100 and target_distx2 > -100 and  target_disty2 < 100 and target_disty2 > -100:
        score1 += 3
    elif target_distx2 < 150 and target_distx2 > -150 and target_disty2 < 150 and target_disty2 > -150:
        score1 += 2
    
    target_distx3 = target.x - pos3.x
    # print(target_distx)
    target_disty3 = target.y - pos3.y
    # print(target_disty)

    if target_distx3 < 50 and target_distx3 > -50 and target_disty3 < 50 and target_disty3 > -50:
        score2 += 5
    elif target_distx3 < 100 and target_distx3 > -100 and  target_disty3 < 100 and target_disty3 > -100:
        score2 += 3
    elif target_distx3 < 150 and target_distx3 > -150 and target_disty3 < 150 and target_disty3 > -150:
        score2 += 2
    target_distx4 = target.x - pos4.x
    # print(target_distx)
    target_disty4 = target.y - pos4.y
    # print(target_disty)

    if target_distx4 < 50 and target_distx4 > -50 and target_disty4 < 50 and target_disty4 > -50:
        score2 += 5
    elif target_distx4 < 100 and target_distx4 > -100 and  target_disty4 < 100 and target_disty4 > -100:
        score2 += 3
    elif target_distx4 < 150 and target_distx4 > -150 and target_disty4 < 150 and target_disty4 > -150:
        score2 += 2
    
        

               
def mouseClicked():
    global button_size, button_x, button_y, page
    global button_size2, button_x2, button_y2
    global button_size3, button_x3, button_y3
    global pos_dwaynejohnson
    radius = button_size / 2.0
    distance_x = abs(mouseX - button_x)
    distance_y = abs(mouseY - button_y)
    hypotenuse = sqrt(distance_x ** 2 + distance_y ** 2)
    if hypotenuse <= radius:
        page += 1
    
    radius2 = button_size2 / 2.0
    distance_x2 = abs(mouseX - button_x2)
    distance_y2 = abs(mouseY - button_y2)
    hypotenuse2 = sqrt(distance_x2 ** 2 + distance_y2 ** 2)
    if hypotenuse2 <= radius2:
        page += 2
        
    if page == 3:
        radius3 = button_size3 / 2.0
        distance_x3 = abs(mouseX - button_x3)
        distance_y3 = abs(mouseY - button_y3)
        hypotenuse3 = sqrt(distance_x3 ** 2 + distance_y3 ** 2)
        if hypotenuse3 <= radius3:
            page -= 2
