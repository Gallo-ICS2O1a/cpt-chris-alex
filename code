rockSize = 49
overRock = None
locked = None
speed = PVector(1, 0)
acceleration = PVector(-1, 0)
deceleration = PVector(-1, 0)
RED = (255,0,0)
GREEN = (0,255,0)
BLUE = (0,0,255)
button_size = 200
button_x = 650
button_y = 350
page = 1
pos = PVector(100, 250)
target = PVector(1020, 250)
pos_dwaynejohnson = PVector(150, 250)
mouseAngle = PVector( 0, 0)
easing = 0.05
score = 0
nospeed = PVector(0, 0)
target_dist = PVector(0, 0)
mouseAngleX = 1
mouseAngleY = 1
topspeed = 5


def setup():
    global rx
    global ry
    size(1300, 500)
    background(225)
    # frameRate(30)
    rx = width/2
    ry = height/2
    rectMode(RADIUS)
    frameRate(9000000000)

def draw():
    global rx
    global ry
    global speed
    global rockSize
    global locked
    global overBox
    global page
    global pos
    global target
    global pos_dwaynejohnson
    global mouseAngle
    global easing
    background(255)
    
    # Start button
    fill(255, 0, 0)
    ellipse(button_x, button_y, button_size, button_size)
    # Title
    fill(0)
    textSize(75)
    text("Curling...Kind of", 280, 200)
    text("Start", 560, 375)
    textSize(25)
    
    if page == 2:
        fill(255)
        fill(225)
        rect(1300, 1300, 1300, 1300)
        fill(19, 48, 219)
        # big circle target
        ellipse(target.x, target.y, 350, 350)
        fill(225)
        # 3rd circle - 2nd from biggest
        ellipse(target.x, target.y, 250, 250)
        fill(219, 38, 59)
        # 2nd circle - 2nd from middle
        ellipse(target.x, target.y ,150, 150)
        fill(225)
        # smallest circle - center
        ellipse(target.x, target.y, 50, 50)
        
        fill(0, 225, 0)
        ellipse(pos.x, pos.y, rockSize, rockSize)  
    
        
        # vector_angle = PVector.sub(pos, target)
        # dist = vector_angle.mag()
        # print(dist)
        
        if pos.x > width/2 + 200:
            ellipse(pos_dwaynejohnson.x, pos_dwaynejohnson.y, 49, 49) 
        if pos.x > width:
            pos.x = width - 49
            
        
        targetX = mouseAngle.x
        dx = targetX - pos.x
        pos.x += dx* easing
        
        targetY = mouseAngle.y
        dy = targetY - pos.y
        pos.y += dy * easing

        if mousePressed == True:
            mouseAngle = PVector(mouseX, mouseY)
            # print(mouseAngle)
            angle = PVector.sub(pos, mouseAngle)
            arrowangle = angle.heading()
            vect = PVector.fromAngle(arrowangle)
            # print(vect)
            speed.sub(vect)
        
        textSize(90)
        text("Score: " + str(score), 100, 100)
        
        fill(225, 0, 0)
        line(200, 250, mouseX, mouseY) 
       #Test if the cursor is over the rock 
               
def mousePressed():
    global pos, mouseAngleX, mouseAngleY
    

    
    mouseAngleX = mouseX
    dx = mouseAngleX - pos.x
    pos.x += dx * easing
    
    mouseAngleY = mouseY
    dy = mouseAngleY - pos.y
    pos.y += dy * easing
    
def mouseDragged():
    global rx
    global ry
    global pos
    global speed
    global acceleration
    global mouseAngle
    global Playermouse
    global nospeed
    
    pos.add(speed)
    if score == range(1, 6):
        pos.sub(speed)
        
def mouseReleased():
    global pos
    global speed
    global acceleration
    global nospeed
    global target
    global target_dist
    global score
    global topspeed
    global easing
    
    
    target_distx = target.x - pos.x
    print(target_distx)
    target_disty = target.y - pos.y
    print(target_disty)
    
    if target_distx < 50 and target_distx > -50 and target_disty < 50 and target_disty > -50:
        score += 5
    elif target_distx < 100 and target_distx > -100 and  target_disty < 100 and target_disty > -100:
        score += 3
    elif target_distx < 150 and target_distx > -150 and target_disty < 150 and target_disty > -150:
        score += 2
        
    pos.x = mouseAngleX + topspeed
    pos.y = mouseAngleY + topspeed
    
    
    if mousePressed == True:
        mouseAngle = pos
    if score == range(1, 6):
        pos.add(acceleration)
        pos_dwaynejohnson.add(speed) 
               
def mouseClicked():
    global button_size, button_x, button_y, page
    radius = button_size / 2.0
    distance_x = abs(mouseX - button_x)
    distance_y = abs(mouseY - button_y)
    hypotenuse = sqrt(distance_x ** 2 + distance_y ** 2)
    if hypotenuse <= radius:
        page += 1
    if target_dist.x and target_dist.y > 100:
        score += 5
