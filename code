rockSize = 49
RED = (255,0,0)
GREEN = (0,255,0)
BLUE = (0,0,255)
pos = PVector(100, 250)
speed = PVector(99,0)
button_size = 200
button_x = 650
button_y = 350
page = 1


def setup():
    size(1300, 500)
    background(225)
    frameRate(30)
    rx = width/2
    ry = height/2
    rectMode(RADIUS)
    
def draw():
    global pos
    global speed
    global rockSize
    
    background(255)
    # Start button
    fill(255, 0, 0)
    ellipse(button_x, button_y, button_size, button_size)
    # Title
    fill(0)
    textSize(75)
    text("Curling Game", 450, 200)
    text("Start", 560, 375)
    textSize(25)
    
    if page == 2:
        fill(255)
        fill(225)
        rect(1300, 1300, 1300, 1300)
        fill(19, 48, 219)
        # big circle target
        ellipse(1020, 250, 350, 350)
        fill(225)
        # 3rd circle - 2nd from biggest
        ellipse(1020, 250, 250, 250)
        fill(219, 38, 59)
        # 2nd circle - 2nd from middle
        ellipse(1020, 250,150, 150)
        fill(225)
        # smallest circle - center
        ellipse(1020, 250, 50, 50)
        
        #player paddle
        fill(0, 225, 0)
        ellipse(mouseX, mouseY, 49, 49)   
        #player rock
        fill(225, 225, 225)
        ellipse(pos.x, pos.y, 49, 49)
        
        radius_pos_1 = rockSize/2
        radius_player = rockSize/2
        a = pos.x - mouseX
        b = pos.y - mouseY
        distance = sqrt(a**2 + b**2)  
        if distance <= radius_pos_1 + radius_player:
            pos.x += speed.x
        
        
            
        
    if pos.x > width:
        pos.x = width
        speed.x = -speed.x
    elif pos.x < 0:
        pos.x = 0
        speed.x = -speed.x
        
    
        
def mouseButton():
    if (overBox):
        locked = True
        fill(255,255,255)
    else:
        locked = False

        
        
def mouseClicked():
    global button_size, button_x, button_y, page
    radius = button_size / 2.0
    distance_x = abs(mouseX - button_x)
    distance_y = abs(mouseY - button_y)
    hypotenuse = sqrt(distance_x ** 2 + distance_y ** 2)
    if hypotenuse <= radius:
        page += 1
        

     

