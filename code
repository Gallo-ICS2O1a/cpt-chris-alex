rockSize = 49
overRock = None
locked = None
speed = PVector(3, 0)
acceleration = PVector(0.001, 0)
deceleration = PVector(-1, 0)
RED = (255,0,0)
GREEN = (0,255,0)
BLUE = (0,0,255)
button_size = 200
button_x = 650
button_y = 350
page = 1
pos = PVector(100, 250)
target = PVector(1020, 250)
pos_dwaynejohnson = PVector(150, 250)
mouseAngle = 0
ease = 0.06
score = 0
nospeed = PVector(0, 0)

def setup():
    global rx
    global ry
    size(1300, 500)
    background(225)
    # frameRate(30)
    rx = width/2
    ry = height/2
    rectMode(RADIUS)

def draw():
    global rx
    global ry
    global speed
    global rockSize
    global locked
    global overBox
    global page
    global pos
    global target
    global pos_dwaynejohnson
    global mouseAngle
    background(255)
    
    # Start button
    fill(255, 0, 0)
    ellipse(button_x, button_y, button_size, button_size)
    # Title
    fill(0)
    textSize(75)
    text("Curling Game", 450, 200)
    text("Start", 560, 375)
    textSize(25)
    
    if page == 2:
        fill(255)
        fill(225)
        rect(1300, 1300, 1300, 1300)
        fill(19, 48, 219)
        # big circle target
        ellipse(target.x, target.y, 350, 350)
        fill(225)
        # 3rd circle - 2nd from biggest
        ellipse(target.x, target.y, 250, 250)
        fill(219, 38, 59)
        # 2nd circle - 2nd from middle
        ellipse(target.x, target.y ,150, 150)
        fill(225)
        # smallest circle - center
        ellipse(target.x, target.y, 50, 50)
        
        fill(0, 225, 0)
        ellipse(pos.x, pos.y, rockSize, rockSize)  
    
        
        # vector_angle = PVector.sub(pos, target)
        # dist = vector_angle.mag()
        # print(dist)
        
        if pos.x > width/2 + 200:
            ellipse(pos_dwaynejohnson.x, pos_dwaynejohnson.y, 49, 49) 
        if pos.x > width:
            pos.x = width - 49
        
    
        # Playermouse = PVector(mouseX, mouseY)
        # angle_a = PVector.sub(Playermouse, pos)
        # dist_a = angle_a.mag()
        
        # angleofplayer = angle_a.heading()
        
        # Vector = PVector.fromAngle(angleofplayer)
        # # print(Vector)
        
        if mousePressed == True:
            mouseAngle = PVector(mouseX, mouseY)
            # print(mouseAngle)
            angle = PVector.sub(mouseAngle, pos)
            arrowangle = angle.heading()
            vect = PVector.fromAngle(arrowangle)
            print(vect)
            speed.sub(vect)
        
        
        
        # mosx = mouseX
        # mousee = mosx - pos.x
        # pos.x += mousee * ease
        
        # mosy = mouseY
        # mouseey = mosy = pos.y
        # pos.y += mouseey * ease
        
        textSize(90)
        text("Score: " + str(score), 100, 100)
       #Test if the cursor is over the rock 
    if (mouseX > rx-rockSize and mouseX < rx+rockSize and
        mouseY > ry-rockSize and mouseY < ry+rockSize):
        overRock = True
        if locked != True:
            stroke(255)
            fill(153)
        else:
            stroke(153)
            fill(153)
            overBox = False
            
def mousePressed():
    global rx
    global ry
    global overRock
    global locked
    global pos
    if overRock == True:
        locked = True
        fill(255)
    else:
        locked = False
    xOffset = mouseX-rx
    yOffset = mouseY-ry

def mousePressed():
    global rx
    global ry
    global pos
    global speed
    global acceleration
    global mouseAngle
    global Playermouse
    

    

def mouseReleased():
    global pos
    global speed
    global acceleration
    global nospeed
    
    pos.add(nospeed)
    
   
def mouseDragged():
    global pos
    global speed
    global acceleration
    
    if mousePressed == True:
        mouseAngle = pos
        
    speed.add(acceleration)
    pos.add(speed)    
    

    

    
        
def mouseClicked():
    global button_size, button_x, button_y, page
    radius = button_size / 2.0
    distance_x = abs(mouseX - button_x)
    distance_y = abs(mouseY - button_y)
    hypotenuse = sqrt(distance_x ** 2 + distance_y ** 2)
    if hypotenuse <= radius:
        page += 1
