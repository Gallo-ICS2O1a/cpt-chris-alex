rockSize = 49
overRock = None
locked = None
speed = PVector(0.1, 0)
acceleration = PVector(-1, 0)
deceleration = PVector(-1, 0)
RED = (255,0,0)
GREEN = (0,255,0)
BLUE = (0,0,255)
button_size = 200
button_x = 650
button_y = 350
button_x2 = 900
button_y2 = 390
button_size2 = 120
button_x3 = 20
button_y3 = 400
button_size3 = 100
page = 1
pos = PVector(100, 250)
target = PVector(1020, 250)
pos_dwaynejohnson = PVector(150, 250)
mouseAngle = PVector(0, 0)
easing = 0.05
score = 0
nospeed = PVector(0, 0)
target_dist = PVector(0, 0)
mouseAngleX = 1
mouseAngleY = 1
topspeed = 5
arrow = PVector(200, 250)

def setup():
    global rx
    global ry
    size(1300, 500)
    background(225)
    # frameRate(30)
    rx = width/2
    ry = height/2
    rectMode(RADIUS)
    frameRate(9000000000)

def draw():
    global rx
    global ry
    global speed
    global rockSize
    global locked
    global overBox
    global page
    global pos
    global target
    global pos_dwaynejohnson
    global mouseAngle
    global easing
    global page
    global arrow
    background(255)
    
    # Start button
    fill(255, 0, 0)
    ellipse(button_x, button_y, button_size, button_size)
    # Title
    fill(0)
    textSize(75)
    text("Curling Simulator 20000", 280, 200)
    text("Start", 560, 375)
    textSize(25)
    fill(0, 0, 225)
    ellipse(button_x2, button_y2, button_size2, button_size2)
    
    if page == 2:
        fill(255)
        fill(225)
        rect(1300, 1300, 1300, 1300)
        fill(19, 48, 219)
        # big circle target
        ellipse(target.x, target.y, 350, 350)
        fill(225)
        # 3rd circle - 2nd from biggest
        ellipse(target.x, target.y, 250, 250)
        fill(219, 38, 59)
        # 2nd circle - 2nd from middle
        ellipse(target.x, target.y ,150, 150)
        fill(225)
        # smallest circle - center
        ellipse(target.x, target.y, 50, 50)
        
        fill(0, 225, 0)
        ellipse(pos.x, pos.y, rockSize, rockSize)  
        
        fill(225, 888, 32049587)
        ellipse(button_x3, button_y3, button_size3, button_size3)
    
        
        # vector_angle = PVector.sub(pos, target)
        # dist = vector_angle.mag()
        # print(dist)
        fill(225, 0, 0)
        if pos.x > width/2 + 200:
            ellipse(pos_dwaynejohnson.x, pos_dwaynejohnson.y, 49, 49) 
        if pos.x > width:
            pos.x = width - 49
            
        # targetX = mouseAngle.x
        # dx = targetX - pos.x
        # pos.x += dx* easing
        
        # targetY = mouseAngle.y
        # dy = targetY - pos.y
        # pos.y += dy * easing

        if mousePressed == True:
            mouseAngle = PVector(mouseX, mouseY)
            # print(mouseAngle)
            angle = PVector.sub(pos, mouseAngle)
            arrowangle = angle.heading()
            vect = PVector.fromAngle(arrowangle)
            # print(vect)
            speed.sub(vect)
            
            distance = width - mouseX
            print(distance)
    
        textSize(90)
        text("Score: " + str(score), 100, 100)
        
        thing = mouseX - 500
        if mouseX < width/2:
            thing = mouseX
        fill(225, 0, 0)
        line(arrow.x, arrow.y, thing, mouseY) 

       
    if page == 3:
        background(0)
        textSize(30)
        text("Use the line to aim your shot", 10, 30)
        fill(225)
        ellipse(button_x3, button_y3, button_size3, button_size3)
        
        
        

    
        
def mouseDragged():
    global pos, mouseAngleX, mouseAngleY
    global topspeed
    global mouseAngle
    global speed
    global pos_dwaynejohnson 
    
    # mouseAngleX = pos.x
    # dx = mouseAngleX - pos.x
    # pos.x += dx * easing
    
    # mouseAngleY = pos.x
    # dy = mouseAngleY - pos.y
    # pos.y += dy * easing
    
    # distance = width - mouseX
    # print(distance)
    
    mouseAngle = pos
    pos = pos + speed
    if score == range(1, 6):
        mouseAngle != pos
        pos != pos + speed



    radius4 = 49 / 2.0
    distance_x4 = abs(mouseX - pos_dwaynejohnson.x )
    distance_y4 = abs(mouseY - pos_dwaynejohnson.y)
    hypotenuse4 = sqrt(distance_x4 ** 2 + distance_y4 ** 2)
    if hypotenuse4 <= radius4 and mouseDragged == True:
        pos_dwaynejohnson = pos_dwaynejohnson + speed
    
def mouseReleased():
    global pos
    global speed
    global acceleration
    global nospeed
    global target
    global target_dist
    global score
    global topspeed
    global easing
    global pos_dwaynejohnson
    global mouseAngle
    
    target_distx = target.x - pos.x
    # print(target_distx)
    target_disty = target.y - pos.y
    # print(target_disty)
    
    if target_distx < 50 and target_distx > -50 and target_disty < 50 and target_disty > -50:
        score += 5
    elif target_distx < 100 and target_distx > -100 and  target_disty < 100 and target_disty > -100:
        score += 3
    elif target_distx < 150 and target_distx > -150 and target_disty < 150 and target_disty > -150:
        score += 2
        
    mouseAngle != pos
    pos != pos + speed
   
    mouseAngle = pos_dwaynejohnson
    pos_dwaynejohnson = pos_dwaynejohnson + speed
               
def mouseClicked():
    global button_size, button_x, button_y, page
    global button_size2, button_x2, button_y2
    global button_size3, button_x3, button_y3
    global pos_dwaynejohnson
    radius = button_size / 2.0
    distance_x = abs(mouseX - button_x)
    distance_y = abs(mouseY - button_y)
    hypotenuse = sqrt(distance_x ** 2 + distance_y ** 2)
    if hypotenuse <= radius:
        page += 1
    
    radius2 = button_size2 / 2.0
    distance_x2 = abs(mouseX - button_x2)
    distance_y2 = abs(mouseY - button_y2)
    hypotenuse2 = sqrt(distance_x2 ** 2 + distance_y2 ** 2)
    if hypotenuse2 <= radius2:
        page += 2
        
    if page == 3 or page == 2:
        radius3 = button_size3 / 2.0
        distance_x3 = abs(mouseX - button_x3)
        distance_y3 = abs(mouseY - button_y3)
        hypotenuse3 = sqrt(distance_x3 ** 2 + distance_y3 ** 2)
        if hypotenuse3 <= radius3:
            page -= 2
            

